USE [MASTER];
GO
CREATE DATABASE TransITDB;
GO
USE TransITDB;
GO

CREATE TABLE [USER]
(
  ID           INT                  NOT NULL IDENTITY PRIMARY KEY,
  FIRST_NAME   NVARCHAR(50) COLLATE Cyrillic_General_CI_AS_KS,
  MIDDLE_NAME  NVARCHAR(50) COLLATE Cyrillic_General_CI_AS_KS,
  LAST_NAME    NVARCHAR(50) COLLATE Cyrillic_General_CI_AS_KS,
  EMAIL        NVARCHAR(50),
  PHONE_NUMBER NVARCHAR(15),
  LOGIN        NVARCHAR(100) UNIQUE NOT NULL,
  PASSWORD     NVARCHAR(100)        NOT NULL,
  ROLE_ID      INT                  NOT NULL,
  IS_ACTIVE    BIT      DEFAULT (1),

  CREATE_DATE  DATETIME DEFAULT (GETDATE()),
  MOD_DATE     DATETIME DEFAULT (GETDATE()),
  CREATE_ID    INT,
  MOD_ID       INT,
  CONSTRAINT FK_CREATE_USER_ROLE
    FOREIGN KEY (CREATE_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_MOD_USER_ROLE
    FOREIGN KEY (MOD_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION
);
GO

CREATE TABLE [ROLE]
(
  ID          INT                                            NOT NULL IDENTITY PRIMARY KEY,
  NAME        NVARCHAR(50)                                   NOT NULL UNIQUE,
  TRANS_NAME  NVARCHAR(50) COLLATE Cyrillic_General_CI_AS_KS NOT NULL UNIQUE,

  CREATE_DATE DATETIME DEFAULT (GETDATE()),
  MOD_DATE    DATETIME DEFAULT (GETDATE()),
  CREATE_ID   INT,
  MOD_ID      INT,
  CONSTRAINT FK_CREATE_ROLE_USER
    FOREIGN KEY (CREATE_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_MOD_ROLE_USER
    FOREIGN KEY (MOD_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION
);
GO

ALTER TABLE [USER]
  ADD CONSTRAINT FK_USER_ROLE
    FOREIGN KEY (ROLE_ID)
      REFERENCES [ROLE] (ID)
      ON DELETE NO ACTION;
GO

CREATE TABLE TOKEN
(
  ID            INT NOT NULL IDENTITY PRIMARY KEY,
  REFRESH_TOKEN NVARCHAR(MAX),

  CREATE_DATE   DATETIME DEFAULT (GETDATE()),
  MOD_DATE      DATETIME DEFAULT (GETDATE()),
  CREATE_ID     INT,
  MOD_ID        INT,
  CONSTRAINT FK_CREATE_TOKEN_USER
    FOREIGN KEY (CREATE_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_MOD_TOKEN_USER
    FOREIGN KEY (MOD_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION
);
GO

CREATE TABLE VEHICLE_TYPE
(
  ID          INT                                            NOT NULL IDENTITY PRIMARY KEY,
  NAME        NVARCHAR(50) COLLATE Cyrillic_General_CI_AS_KS NOT NULL UNIQUE,

  CREATE_DATE DATETIME DEFAULT (GETDATE()),
  MOD_DATE    DATETIME DEFAULT (GETDATE()),
  CREATE_ID   INT,
  MOD_ID      INT,
  CONSTRAINT FK_MOD_VEHICLE_TYPE_USER
    FOREIGN KEY (CREATE_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_MOD_VEHICLE_TYPE_ROLE
    FOREIGN KEY (MOD_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION
);
GO

CREATE TABLE VEHICLE
(
  ID              INT NOT NULL IDENTITY PRIMARY KEY,
  VEHICLE_TYPE_ID INT,
  VINCODE         NVARCHAR(20),
  INVENTORY_ID    NVARCHAR(40),
  REG_NUM         NVARCHAR(8),
  BRAND           NVARCHAR(50) COLLATE Cyrillic_General_CI_AS_KS,
  MODEL           NVARCHAR(50) COLLATE Cyrillic_General_CI_AS_KS,

  CREATE_DATE     DATETIME DEFAULT (GETDATE()),
  MOD_DATE        DATETIME DEFAULT (GETDATE()),
  CREATE_ID       INT,
  MOD_ID          INT,
  CONSTRAINT FK_VEHICLE_VEHICLE_TYPE
    FOREIGN KEY (VEHICLE_TYPE_ID)
      REFERENCES VEHICLE_TYPE (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_MOD_VEHICLE_USER
    FOREIGN KEY (CREATE_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_MOD_VEHICLE_ROLE
    FOREIGN KEY (MOD_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT CK_VEHICLE_VINCODE
    CHECK (VINCODE LIKE '[0-9][0-9][0-9]/[0-9][0-9][0-9][0-9]'),
  CONSTRAINT CK_VEHICLE_REG_NUM
    CHECK (REG_NUM LIKE '[A-Z][A-Z][0-9][0-9][0-9][0-9][A-Z][A-Z]')
);
GO

CREATE TABLE MALFUNCTION_GROUP
(
  ID          INT                                             NOT NULL IDENTITY PRIMARY KEY,
  NAME        NVARCHAR(MAX) COLLATE Cyrillic_General_CI_AS_KS NOT NULL,

  CREATE_DATE DATETIME DEFAULT (GETDATE()),
  MOD_DATE    DATETIME DEFAULT (GETDATE()),
  CREATE_ID   INT FOREIGN KEY (CREATE_ID)
    REFERENCES [USER] (ID)
    ON DELETE NO ACTION,
  MOD_ID      INT FOREIGN KEY (MOD_ID)
    REFERENCES [USER] (ID)
    ON DELETE NO ACTION
);
GO

CREATE TABLE MALFUNCTION_SUBGROUP
(
  ID                   INT                                             NOT NULL IDENTITY PRIMARY KEY,
  NAME                 NVARCHAR(MAX) COLLATE Cyrillic_General_CI_AS_KS NOT NULL,
  MALFUNCTION_GROUP_ID INT                                             NOT NULL,

  CREATE_DATE          DATETIME DEFAULT (GETDATE()),
  MOD_DATE             DATETIME DEFAULT (GETDATE()),
  CREATE_ID            INT,
  MOD_ID               INT,
  CONSTRAINT FK_MALFUNCTION_SUBGROUP_MALFUNCTION_GROUP
    FOREIGN KEY (MALFUNCTION_GROUP_ID)
      REFERENCES MALFUNCTION_GROUP (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_CREATE_MALFUNCTION_SUBGROUP_USER
    FOREIGN KEY (CREATE_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_MOD_MALFUNCTION_SUBGROUP_USER
    FOREIGN KEY (MOD_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION
);
GO

CREATE TABLE MALFUNCTION
(
  ID                      INT                                             NOT NULL IDENTITY PRIMARY KEY,
  NAME                    NVARCHAR(MAX) COLLATE Cyrillic_General_CI_AS_KS NOT NULL,
  MALFUNCTION_SUBGROUP_ID INT                                             NOT NULL,

  CREATE_DATE             DATETIME DEFAULT (GETDATE()),
  MOD_DATE                DATETIME DEFAULT (GETDATE()),
  CREATE_ID               INT,
  MOD_ID                  INT,
  CONSTRAINT FK_MALFUNCTION_SUBGROUP_MALFUNCTION_SUBGROUP
    FOREIGN KEY (MALFUNCTION_SUBGROUP_ID)
      REFERENCES [MALFUNCTION_SUBGROUP] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_CREATE_MALFUNCTION_ROLE
    FOREIGN KEY (CREATE_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_MOD_MALFUNCTION_USER
    FOREIGN KEY (MOD_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION
);
GO

CREATE TABLE STATE
(
  ID         INT NOT NULL IDENTITY PRIMARY KEY,
  NAME       NVARCHAR(50) COLLATE Cyrillic_General_CI_AS_KS UNIQUE,
  TRANS_NAME NVARCHAR(50) COLLATE Cyrillic_General_CI_AS_KS UNIQUE
);
GO

CREATE TABLE ISSUE
(
  ID             INT NOT NULL IDENTITY PRIMARY KEY,
  SUMMARY        NVARCHAR(MAX) COLLATE Cyrillic_General_CI_AS_KS,
  WARRANTY       INT,
  DEADLINE       DATETIME,

  STATE_ID       INT NOT NULL,
  ASSIGNED_TO    INT,
  VEHICLE_ID     INT NOT NULL,
  MALFUNCTION_ID INT,

  CREATE_DATE    DATETIME DEFAULT (GETDATE()),
  MOD_DATE       DATETIME DEFAULT (GETDATE()),
  CREATE_ID      INT,
  MOD_ID         INT,

  CONSTRAINT FK_ISSUE_STATE
    FOREIGN KEY (STATE_ID)
      REFERENCES STATE (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_MOD_ISSUE_USER
    FOREIGN KEY (MOD_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_CREATE_ISSUE_USER
    FOREIGN KEY (CREATE_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_ISSUE_USER_ASSIGNED_TO
    FOREIGN KEY (ASSIGNED_TO)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_ISSUE_VEHICLE
    FOREIGN KEY (VEHICLE_ID)
      REFERENCES [VEHICLE] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_ISSUE_MALFUNCTION
    FOREIGN KEY (MALFUNCTION_ID)
      REFERENCES [MALFUNCTION] (ID)
      ON DELETE NO ACTION
);
GO

CREATE TABLE ACTION_TYPE
(
  ID          INT                                            NOT NULL IDENTITY PRIMARY KEY,
  NAME        NVARCHAR(50) COLLATE Cyrillic_General_CI_AS_KS NOT NULL UNIQUE,

  CREATE_DATE DATETIME DEFAULT (GETDATE()),
  MOD_DATE    DATETIME DEFAULT (GETDATE()),
  CREATE_ID   INT,
  MOD_ID      INT,
  CONSTRAINT FK_MOD_ACTION_TYPE_USER
    FOREIGN KEY (MOD_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_CREATE_ACTION_TYPE_USER
    FOREIGN KEY (CREATE_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION
);
GO

CREATE TABLE SUPPLIER
(
  ID          INT                                            NOT NULL IDENTITY PRIMARY KEY,
  NAME        NVARCHAR(50) COLLATE Cyrillic_General_CI_AS_KS NOT NULL UNIQUE,

  CREATE_DATE DATETIME DEFAULT (GETDATE()),
  MOD_DATE    DATETIME DEFAULT (GETDATE()),
  CREATE_ID   INT,
  MOD_ID      INT,
  CONSTRAINT FK_CREATE_SUPPLIER_USER
    FOREIGN KEY (CREATE_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_MOD_SUPPLIER_USER
    FOREIGN KEY (MOD_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION
);
GO

CREATE TABLE ISSUE_LOG
(
  ID             INT NOT NULL IDENTITY PRIMARY KEY,
  DESCRIPTION    NVARCHAR(MAX) COLLATE Cyrillic_General_CI_AS_KS,
  EXPENSES       DECIMAL(10, 2),

  OLD_STATE_ID   INT NOT NULL,
  NEW_STATE_ID   INT NOT NULL,

  SUPPLIER_ID    INT,
  ACTION_TYPE_ID INT NOT NULL,
  ISSUE_ID       INT NOT NULL,

  CREATE_DATE    DATETIME DEFAULT (GETDATE()),
  MOD_DATE       DATETIME DEFAULT (GETDATE()),
  CREATE_ID      INT,
  MOD_ID         INT,
  CONSTRAINT FK_ISSUE_LOG_SUPPLIER
    FOREIGN KEY (SUPPLIER_ID)
      REFERENCES SUPPLIER (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_ISSUE_LOG_ACTION_TYPE
    FOREIGN KEY (ACTION_TYPE_ID)
      REFERENCES ACTION_TYPE (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_ISSUE_LOG_ISSUE
    FOREIGN KEY (ISSUE_ID)
      REFERENCES ISSUE (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_CREATE_ISSUE_LOG_USER
    FOREIGN KEY (CREATE_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_MOD_ISSUE_LOG_USER
    FOREIGN KEY (MOD_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_OLD_ISSUE_LOG_STATE
    FOREIGN KEY (OLD_STATE_ID)
      REFERENCES STATE (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_NEW_ISSUE_LOG_STATE
    FOREIGN KEY (NEW_STATE_ID)
      REFERENCES STATE (ID)
      ON DELETE NO ACTION
);
GO

CREATE TABLE DOCUMENT
(
  ID           INT NOT NULL IDENTITY PRIMARY KEY,
  NAME         NVARCHAR(50) COLLATE Cyrillic_General_CI_AS_KS,
  DESCRIPTION  NVARCHAR(MAX) COLLATE Cyrillic_General_CI_AS_KS,

  ISSUE_LOG_ID INT,
  CREATE_DATE  DATETIME DEFAULT (GETDATE()),
  MOD_DATE     DATETIME DEFAULT (GETDATE()),
  CREATE_ID    INT,
  MOD_ID       INT,
  CONSTRAINT FK_DOCUMENT_ISSUE_LOG
    FOREIGN KEY (ISSUE_LOG_ID)
      REFERENCES [ISSUE_LOG] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_CREATE_DOCUMENT_USER
    FOREIGN KEY (CREATE_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_MOD_DOCUMENT_USER
    FOREIGN KEY (MOD_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION
);
GO

CREATE TABLE BILL
(
  ID          INT NOT NULL IDENTITY PRIMARY KEY,
  SUM         DECIMAL(20, 2),
  DOCUMENT_ID INT,
  ISSUE_ID    INT NOT NULL,

  CREATE_DATE DATETIME DEFAULT (GETDATE()),
  MOD_DATE    DATETIME DEFAULT (GETDATE()),
  CREATE_ID   INT,
  MOD_ID      INT,
  CONSTRAINT FK_BILL_ISSUE
    FOREIGN KEY (ISSUE_ID)
      REFERENCES ISSUE (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_CREATE_BILL_USER
    FOREIGN KEY (CREATE_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_MOD_BILL_USER
    FOREIGN KEY (MOD_ID)
      REFERENCES [USER] (ID)
      ON DELETE NO ACTION,
  CONSTRAINT FK_BILL_DOCUMENT
    FOREIGN KEY (DOCUMENT_ID)
      REFERENCES DOCUMENT (ID)
      ON DELETE NO ACTION
);
GO

CREATE TRIGGER [dbo].[TR_ASSIGN_DATE_ISSUE_UPDATE]
  ON [dbo].[ISSUE]
  AFTER UPDATE
  AS
BEGIN
  IF NOT EXISTS(SELECT * FROM INSERTED) OR (TRIGGER_NESTLEVEL() > 1)
    RETURN;

  UPDATE [dbo].[ISSUE] SET MOD_DATE = GETDATE() WHERE ID IN (SELECT ID FROM INSERTED);
END;
GO

CREATE TRIGGER [dbo].[TR_ASSIGN_DATE_ROLE_UPDATE]
  ON [dbo].[ROLE]
  AFTER UPDATE
  AS
BEGIN
  IF NOT EXISTS(SELECT * FROM INSERTED) OR (TRIGGER_NESTLEVEL() > 1)
    RETURN;

  UPDATE [dbo].[ROLE] SET MOD_DATE = GETDATE() WHERE ID IN (SELECT ID FROM INSERTED);
END;
GO

CREATE TRIGGER [dbo].[TR_ASSIGN_DATE_USER_UPDATE]
  ON [dbo].[USER]
  AFTER UPDATE
  AS
BEGIN
  IF NOT EXISTS(SELECT * FROM INSERTED) OR (TRIGGER_NESTLEVEL() > 1)
    RETURN;

  UPDATE [dbo].[USER] SET MOD_DATE = GETDATE() WHERE ID IN (SELECT ID FROM INSERTED);
END;
GO

CREATE TRIGGER [dbo].[TR_ASSIGN_DATE_VEHICLE_TYPE_UPDATE]
  ON [dbo].[VEHICLE_TYPE]
  AFTER UPDATE
  AS
BEGIN
  IF NOT EXISTS(SELECT * FROM INSERTED) OR (TRIGGER_NESTLEVEL() > 1)
    RETURN;

  UPDATE [dbo].[VEHICLE_TYPE] SET MOD_DATE = GETDATE() WHERE ID IN (SELECT ID FROM INSERTED);
END;
GO

CREATE TRIGGER [dbo].[TR_ASSIGN_DATE_VEHICLE_UPDATE]
  ON [dbo].[VEHICLE]
  AFTER UPDATE
  AS
BEGIN
  IF NOT EXISTS(SELECT * FROM INSERTED) OR (TRIGGER_NESTLEVEL() > 1)
    RETURN;

  UPDATE [dbo].[VEHICLE] SET MOD_DATE = GETDATE() WHERE ID IN (SELECT ID FROM INSERTED);
END;
GO

CREATE TRIGGER [dbo].[TR_ASSIGN_DATE_MALFUNCTION_GROUP_UPDATE]
  ON [dbo].[MALFUNCTION_GROUP]
  AFTER UPDATE
  AS
BEGIN
  IF NOT EXISTS(SELECT * FROM INSERTED) OR (TRIGGER_NESTLEVEL() > 1)
    RETURN;

  UPDATE [dbo].[MALFUNCTION_GROUP] SET MOD_DATE = GETDATE() WHERE ID IN (SELECT ID FROM INSERTED);
END;
GO

CREATE TRIGGER [dbo].[TR_ASSIGN_DATE_MALFUNCTION_SUBGROUP_UPDATE]
  ON [dbo].[MALFUNCTION_SUBGROUP]
  AFTER UPDATE
  AS
BEGIN
  IF NOT EXISTS(SELECT * FROM INSERTED) OR (TRIGGER_NESTLEVEL() > 1)
    RETURN;

  UPDATE [dbo].[MALFUNCTION_SUBGROUP] SET MOD_DATE = GETDATE() WHERE ID IN (SELECT ID FROM INSERTED);
END;
GO

CREATE TRIGGER [dbo].[TR_ASSIGN_DATE_MALFUNCTION_UPDATE]
  ON [dbo].[MALFUNCTION]
  AFTER UPDATE
  AS
BEGIN
  IF NOT EXISTS(SELECT * FROM INSERTED) OR (TRIGGER_NESTLEVEL() > 1)
    RETURN;

  UPDATE [dbo].[MALFUNCTION] SET MOD_DATE = GETDATE() WHERE ID IN (SELECT ID FROM INSERTED);
END;
GO

CREATE TRIGGER [dbo].[TR_ASSIGN_DATE_DOCUMENT_UPDATE]
  ON [dbo].[DOCUMENT]
  AFTER UPDATE
  AS
BEGIN
  IF NOT EXISTS(SELECT * FROM INSERTED) OR (TRIGGER_NESTLEVEL() > 1)
    RETURN;

  UPDATE [dbo].[DOCUMENT] SET MOD_DATE = GETDATE() WHERE ID IN (SELECT ID FROM INSERTED);
END;
GO

CREATE TRIGGER [dbo].[TR_ASSIGN_DATE_BILL_UPDATE]
  ON [dbo].[BILL]
  AFTER UPDATE
  AS
BEGIN
  IF NOT EXISTS(SELECT * FROM INSERTED) OR (TRIGGER_NESTLEVEL() > 1)
    RETURN;

  UPDATE [dbo].[BILL] SET MOD_DATE = GETDATE() WHERE ID IN (SELECT ID FROM INSERTED);
END;
GO

CREATE TRIGGER [dbo].[TR_ASSIGN_DATE_SUPPLIER_UPDATE]
  ON [dbo].[SUPPLIER]
  AFTER UPDATE
  AS
BEGIN
  IF NOT EXISTS(SELECT * FROM INSERTED) OR (TRIGGER_NESTLEVEL() > 1)
    RETURN;

  UPDATE [dbo].[SUPPLIER] SET MOD_DATE = GETDATE() WHERE ID IN (SELECT ID FROM INSERTED);
END;
GO

CREATE TRIGGER [dbo].[TR_ASSIGN_DATE_ACTION_TYPE_UPDATE]
  ON [dbo].[ACTION_TYPE]
  AFTER UPDATE
  AS
BEGIN
  IF NOT EXISTS(SELECT * FROM INSERTED) OR (TRIGGER_NESTLEVEL() > 1)
    RETURN;

  UPDATE [dbo].[ACTION_TYPE] SET MOD_DATE = GETDATE() WHERE ID IN (SELECT ID FROM INSERTED);
END;
GO

CREATE TRIGGER [dbo].[TR_ASSIGN_DATE_TOKEN_UPDATE]
  ON [dbo].[TOKEN]
  AFTER UPDATE
  AS
BEGIN
  IF NOT EXISTS(SELECT * FROM INSERTED) OR (TRIGGER_NESTLEVEL() > 1)
    RETURN;

  UPDATE [dbo].[TOKEN] SET MOD_DATE = GETDATE() WHERE ID IN (SELECT ID FROM INSERTED);
END;
GO

DBCC CHECKIDENT (ROLE, RESEED, 0);
DBCC CHECKIDENT (STATE, RESEED, 0);
GO

INSERT INTO [ROLE] (NAME, TRANS_NAME)
VALUES ('ADMIN', N'Адмін'),
       ('WORKER', N'Працівник'),
       ('ENGINEER', N'Інженер'),
       ('CUSTOMER', N'Реєстратор'),
       ('ANALYST', N'Аналітик');
GO

INSERT INTO [STATE] (NAME, TRANS_NAME)
VALUES ('NEW', N'Нова'),
       ('VERIFIED', N'Верифіковано'),
       ('REJECTED', N'Відхилено'),
       ('TODO', N'До виконання'),
       ('EXECUTING', N'В роботі'),
       ('DONE', N'Готово'),
       ('CONFIRMED', N'Підтверджено'),
       ('UNCONFIRMED', N'Не підтверджено');
GO

ALTER TABLE ISSUE
  ADD CONSTRAINT DF_ISSUE_STATE
    DEFAULT (1) FOR STATE_ID;
GO
